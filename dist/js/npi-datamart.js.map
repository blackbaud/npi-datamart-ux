{
  "version": 3,
  "file": "npi-datamart.js",
  "sources": [
    "js/src/datamartapi/datamartapi.js",
    "js/src/datamartauthentication/datamartauthentication.js",
    "js/src/datamartreport/datamartreport.js",
    "js/src/module.js",
    "js/templates/templates.js.tmp"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxmhhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A",
  "sourceRoot": "../..",
  "sourcesContent": [
    "/*jslint browser: false */\n/*global angular */\n\n(function () {\n    'use strict';\n    //JSDoc Module Heading, YAML Title, YAML Description\n    /**\n     * @module npi-datamart.api\n     * @title Data Mart API\n     * @description API module for NPI Data Mart UX\n     */\n    angular.module('npi-datamart.api', ['npi-datamart.authentication'])\n        .factory('BBDataMartAPI', ['$q', '$timeout', '$http', function ($q, $timeout, $http) {\n            /**\n             * An Angular Factory for generating BBDataMartAPI objects\n             * @method BBDataMartAPI\n             * @param {Object} options Object containing the information for the authentication and datamart\n             * @param {BBDataMartAuthentication} options.authentication A BBDataMartAuthentication object\n             * @param {string} [options.dataMartId] ID of the datamart\n             * @param {Function} [options.getDataMartId] A promise to return the Data Mart ID as a string. Required if dataMartId not provided.\n             * @param {Function} [options.translateObjectIdentifier] A funtion returning a promise that returns a data mart identifier based on a provided identifier.  This is a hook to allow custom identifier translation.\n             * @param {Function} [options.translateFilters] A funtion returning a promise that returns a filters object based on a provided filters object.  This is a hook to allow custom filters translation. \n             * @param {Function} [options.translateAttributeName] A function that returns a translated attribute name based on a provided attribute name.\n             * @return {BBDataMartAPI} A class containing methods to handle interactions with the Data Mart APIs\n             */\n            var BBDataMartAPI = function (options) {\n                var apiContextPromise,\n                    authentication,\n                    objectUriPromises = {},\n                    self = this;\n\n                options = options || {};\n                authentication = options.authentication;\n\n                if (!authentication) {\n                    throw 'An option for authentication must be provided.  This should be a BBDataMartAuthentication used to authenticate with the data mart API.';\n                }\n\n                if (!options.dataMartId && !options.getDataMartId) {\n                    throw 'An option for dataMartId or getDataMartId must be provided';\n                }\n\n                /**\n                 * Gets the Data Mart ID\n                 * @method getDataMartId\n                 * @return {CallExpression} A promise to return the Data Mart ID as a string\n                 */\n                self.getDataMartId = function getDataMartId() {\n                    return $q(function (resolve, reject) {\n                        if (options.dataMartId) {\n                            resolve(options.dataMartId);\n                        } else {\n                            options.getDataMartId().then(resolve).catch(reject);\n                        }\n                    });\n                };\n\n                /**\n                 * Get the root of the API\n                 * @method getApiRoot\n                 * @return {CallExpression} A promise to return the root URL of the API as a string\n                 */\n                self.getApiRoot = function getApiRoot() {\n                    return authentication.getDomain();\n                };\n\n                function getAPIContext() {\n                    if (!apiContextPromise) {\n                        apiContextPromise = $q(function (resolve, reject) {\n                            self.getApiRoot().then(function (apiRoot) {\n                                self.getDataMartId().then(function (dataMartId) {\n                                    resolve({\n                                        apiRoot: apiRoot,\n                                        dataMartId: dataMartId\n                                    });\n                                }).catch(reject);\n                            }).catch(reject);\n                        });\n                    }\n                    return apiContextPromise;\n                }\n\n                function ensureAuthenticatedContext() {\n                    return $q(function (resolve, reject) {\n                        authentication.ensureAuthenticated().then(function () {\n                            getAPIContext().then(function (context) {\n                                resolve(context);\n                            }).catch(reject);\n                        }).catch(reject);\n                    });\n                }\n\n                function getObjectUriFromIdentifier(context, objectIdentifier) {\n                    if (!objectUriPromises[objectIdentifier]) {\n                        objectUriPromises[objectIdentifier] = $q(function (resolve, reject) {\n                            function lookupUriForObjectId(id) {\n                                var postData = {\n                                    identifierToUri: [id]\n                                };\n\n                                $http.post(context.apiRoot + '/gdc/md/' + context.dataMartId + '/identifiers', postData, {\n                                    withCredentials: true\n                                }).then(function (result) {\n                                    if (result.data && result.data.identifiers && result.data.identifiers[0] && result.data.identifiers[0].uri) {\n                                        resolve(result.data.identifiers[0].uri);\n                                    } else {\n                                        reject();\n                                    }\n                                }).catch(reject);\n                            }\n\n                            if (options.translateObjectIdentifier) {\n                                options.translateObjectIdentifier(objectIdentifier).then(function (id) {\n                                    lookupUriForObjectId(id);\n                                }).catch(reject);\n                            } else {\n                                lookupUriForObjectId(objectIdentifier);\n                            }\n                        });\n                    }\n\n                    return objectUriPromises[objectIdentifier];\n                }\n\n                function getObjectDefinitionByUri(context, objectUri) {\n                    return $q(function (resolve, reject) {\n                        $http.get(context.apiRoot + objectUri, {\n                            withCredentials: true\n                        }).then(function (result) {\n                            if (result.data) {\n                                resolve(result.data);\n                            } else {\n                                reject();\n                            }\n                        }).catch(reject);\n                    });\n                }\n\n                function getSingleElementUri(context, elementsUri, elementValue) {\n                    var i,\n                        el,\n                        elementUri = null;\n\n                    return $q(function (resolve, reject) {\n                        $http.get(context.apiRoot + elementsUri + '?filter=' + elementValue, {\n                            withCredentials: true\n                        }).then(function (result) {\n                            if (result.data && result.data.attributeElements && result.data.attributeElements.elements) {\n                                for (i = 0; i < result.data.attributeElements.elements.length; i += 1) {\n                                    el = result.data.attributeElements.elements[i];\n                                    if (el.title.toString() === elementValue.toString()) {\n                                        elementUri = el.uri;\n                                        break;\n                                    }\n                                }\n\n                                resolve(elementUri);\n                            }\n                            resolve(null);\n                        }).catch(reject);\n                    });\n                }\n\n                function getAttributeName(attribute) {\n                    if (options.translateAttributeName) {\n                        return options.translateAttributeName(attribute);\n                    }\n\n                    return attribute;\n                }\n\n                function getObjectIdentifierDisplayForm(attribute) {\n                    var identifier = null;\n\n                    if (attribute) {\n                        if (attribute.lastIndexOf('attr.', 0) === 0) {\n                            identifier = attribute.replace('attr.', 'label.');\n                        } else {\n                            identifier = 'label.' + attribute;\n                        }\n                    }\n\n                    return identifier;\n                }\n\n                function getDataResults(context, dataResultsUri, skipRetry) {\n                    return $q(function (resolve, reject) {\n                        $http.get(context.apiRoot + dataResultsUri, {\n                            withCredentials: true\n                        }).then(function (result) {\n                            if (!skipRetry && result.data && !result.data.xtab_data) {\n                                $timeout(function () {\n                                    resolve(getDataResults(context, dataResultsUri, false));\n                                }, 3000);\n                            } else {\n                                resolve(result);\n                            }\n                        }).catch(reject);\n                    });\n                }\n\n                function executeReportByPostData(context, postData) {\n                    return $q(function (resolve, reject) {\n                        $http.post(context.apiRoot + '/gdc/app/projects/' + context.dataMartId + '/execute', postData, {\n                            withCredentials: true\n                        }).then(function (result) {\n                            if (result.data && result.data.execResult && result.data.execResult.dataResult) {\n                                resolve(getDataResults(context, result.data.execResult.dataResult));\n                            } else {\n                                reject();\n                            }\n                        }).catch(reject);\n                    });\n                }\n\n                function buildElementFilter(context, filter, objectDisplayFormUri) {\n                    var filterObj = {\n                        uri: objectDisplayFormUri,\n                        constraint: {\n                            type: 'list'\n                        }\n                    },\n                        i,\n                        tasks = [],\n                        values;\n\n                    return $q(function (resolve) {\n                        if (filter.value) {\n                            if (!Array.isArray(filter.value)) {\n                                values = [filter.value];\n                            } else {\n                                values = filter.value;\n                            }\n\n                            for (i = 0; i < values.length; i += 1) {\n                                tasks.push(getSingleElementUri(context, objectDisplayFormUri + '/elements', values[i]));\n                            }\n                            if (tasks.length > 0) {\n                                $q.all(tasks).then(function (objectElements) {\n                                    filterObj.constraint.elements = objectElements;\n                                    resolve(filterObj);\n                                });\n                            } else {\n                                resolve(null);\n                            }\n                        } else {\n                            resolve(null);\n                        }\n                    });\n                }\n\n                function buildReportRequestContext(context, filters) {\n                    return $q(function (resolve, reject) {\n                        var attributeDisplayForm,\n                            i,\n                            tasks = [];\n\n                        function buildContext(filters) {\n                            var reportRequestContext = {};\n\n                            for (i = 0; i < filters.length; i += 1) {\n                                if (filters[i].attribute) {\n                                    attributeDisplayForm = getObjectIdentifierDisplayForm(getAttributeName(filters[i].attribute));\n                                } else {\n                                    attributeDisplayForm = filters[i].attributeDisplayForm;\n                                }\n\n                                if (attributeDisplayForm) {\n                                    tasks.push(getObjectUriFromIdentifier(context, attributeDisplayForm));\n                                } else {\n                                    throw new Error('Filter must have an attribute or attribute display form specified');\n                                }\n                            }\n\n                            //resolve display form uri for all filters\n                            $q.all(tasks).then(function (objectDisplayFormUriValues) {\n                                tasks = [];\n                                for (i = 0; i < filters.length; i += 1) {\n                                    if (filters[i].value) {\n                                        tasks.push(buildElementFilter(context, filters[i], objectDisplayFormUriValues[i]));\n                                    }\n                                }\n                                if (tasks.length > 0) {\n                                    $q.all(tasks).then(function (contextFilters) {\n                                        if (contextFilters.length > 0) {\n                                            reportRequestContext = {\n                                                filters: contextFilters\n                                            };\n                                        }\n                                        resolve(reportRequestContext);\n                                    });\n                                } else {\n                                    resolve(null);\n                                }\n                            }).catch(reject);\n                        }\n\n                        if (filters) {\n                            if (options.translateFilters) {\n                                options.translateFilters(filters).then(buildContext);\n                            } else {\n                                buildContext(filters);\n                            }\n                        } else {\n                            resolve(null);\n                        }\n                    });\n                }\n\n                function executeReport(context, reportIdentifier, filters) {\n                    return $q(function (resolve, reject) {\n                        $q.all([getObjectUriFromIdentifier(context, reportIdentifier), buildReportRequestContext(context, filters)]).then(function (taskResults) {\n                            var postData = {},\n                                reportRequest = {},\n                                reportPath = taskResults[0],\n                                contextFilters = taskResults[1];\n\n                            reportRequest.report = reportPath;\n                            if (contextFilters) {\n                                reportRequest.context = contextFilters;\n                            }\n                            postData.report_req = reportRequest;\n\n                            executeReportByPostData(context, postData).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                }\n\n                function executeReportRaw(context, postData) {\n                    return $q(function (resolve, reject) {\n                        function loadReport(uri) {\n                            $http.get(uri, {\n                                withCredentials: true\n                            }).then(function (result) {\n                                if (result.data && result.data.uri) {\n                                    loadReport(context.apiRoot + result.data.uri);\n                                } else {\n                                    resolve(result);\n                                }\n                            }).catch(reject);\n                        }\n\n                        $http.post(context.apiRoot + '/gdc/app/projects/' + context.dataMartId + '/execute/raw', postData, {\n                            withCredentials: true\n                        }).then(function (result) {\n                            if (result.data && result.data.uri) {\n                                loadReport(context.apiRoot + result.data.uri);\n                            } else {\n                                resolve(result);\n                            }\n                        }).catch(reject);\n                    });\n                }\n\n                function getHeadlineDataResults(result) {\n                    var reportData = null,\n                        xtabData;\n\n                    if (result.data && result.data.xtab_data && result.data.xtab_data.data) {\n                        xtabData = result.data.xtab_data.data;\n                        if (xtabData[0] && xtabData[0][0]) {\n                            reportData = xtabData[0][0];\n                        }\n                    }\n\n                    return reportData;\n                }\n\n                function getLatestReportDefinition(context, reportIdentifier) {\n                    return $q(function (resolve, reject) {\n                        getObjectUriFromIdentifier(context, reportIdentifier).then(function (reportUri) {\n                            getObjectDefinitionByUri(context, reportUri).then(function (reportObject) {\n                                if (reportObject && reportObject.report && reportObject.report.content && reportObject.report.content.definitions) {\n                                    getObjectDefinitionByUri(context, reportObject.report.content.definitions.pop()).then(function (reportDefinition) {\n                                        resolve(reportDefinition);\n                                    }).catch(reject);\n                                } else {\n                                    reject();\n                                }\n                            }).catch(reject);\n                        }).catch(reject);\n                    });\n                }\n\n                function getHeadlineReportDrillContext(context, reportIdentifier, filters) {\n                    return $q(function (resolve, reject) {\n                        var drillAttribute,\n                            drillContext,\n                            metricUri,\n                            response,\n                            tasks = [getLatestReportDefinition(context, reportIdentifier),\n                                getObjectUriFromIdentifier(context, reportIdentifier)];\n\n                        if (filters) {\n                            tasks.push(buildReportRequestContext(context, filters));\n                        }\n\n                        $q.all(tasks).then(function (taskResults) {\n                            response = taskResults[0];\n\n                            if (response &&\n                                    response.reportDefinition &&\n                                    response.reportDefinition.content &&\n                                    response.reportDefinition.content.grid &&\n                                    response.reportDefinition.content.grid.metrics &&\n                                    response.reportDefinition.content.grid.metrics[0] &&\n                                    response.reportDefinition.content.grid.metrics[0].uri\n                                    ) {\n                                metricUri = response.reportDefinition.content.grid.metrics[0].uri;\n                                drillAttribute = response.reportDefinition.content.grid.metrics[0].drillAcrossStepAttributeDF;\n                            }\n\n                            drillContext = {\n                                reportUri: taskResults[1],\n                                executionContext: {\n                                    drillInto: {\n                                        locators: [\n                                            {\n                                                metricLocator: {\n                                                    uri: metricUri\n                                                }\n                                            }\n                                        ],\n                                        target: drillAttribute,\n                                        targetType: \"attributeDisplayForm\"\n                                    },\n                                    filters: (filters && taskResults[2] ? taskResults[2].filters : null)\n                                }\n                            };\n\n                            resolve(drillContext);\n                        }).catch(reject);\n                    });\n                }\n\n                function loadDrillInRecordIds(context, drillContext) {\n                    return $q(function (resolve, reject) {\n                        var postData = {\n                            report_req: {\n                                context: drillContext.executionContext,\n                                report: drillContext.reportUri\n                            }\n                        };\n\n                        executeReportRaw(context, postData).then(function (result) {\n                            var ids = [],\n                                rows;\n\n                            if (result.data) {\n                                //Break the CSV into an array or lines, removing the quotes around each field\n                                rows = result.data.replace(/\"/g, '').split(\"\\n\");\n\n                                //Drop the header row\n                                rows.shift();\n\n                                angular.forEach(rows, function (row) {\n                                    //Take the first column from the row and add it as the ID.  Check to make sure it isn't an empty string or 0 ID\n                                    var id = row.split(',')[0];\n                                    if (id) {\n                                        ids.push(id);\n                                    }\n                                });\n\n                                resolve(ids);\n                            } else {\n                                reject();\n                            }\n                        }).catch(reject);\n                    });\n                }\n\n                /**\n                 * Check if the platform is available.\n                 * @method platformIsAvailable\n                 * @return {CallExpression} A promise for if the platform is available as a boolean\n                 */\n                self.platformIsAvailable = function platformIsAvailable() {\n                    return $q(function (resolve) {\n                        self.getApiRoot().then(function (apiRoot) {\n                            $http.get(apiRoot + '/gdc/ping', {\n                                withCredentials: true\n                            }).then(function () {\n                                resolve(true);\n                            }).catch(function () {\n                                resolve(false);\n                            });\n                        });\n                    });\n                };\n\n                /**\n                 * Gets the object URI from an identifier\n                 * @method getObjectUriFromIdentifier\n                 * @param {string} identifier Identifier for a Data Mart report or dashboard\n                 * @return {CallExpression} A promise to return the relative URI for the Data Mart report or dashboard\n                 */\n                self.getObjectUriFromIdentifier = function (identifier) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            getObjectUriFromIdentifier(context, identifier).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                /**\n                 * Execites a report based on an identifier and filters\n                 * @method executeReport\n                 * @param {string} reportIdentifier Identifier for the report\n                 * @param {Object[]} filters Filters for the report\n                 * @param {string} [filters[].attribute] The name of the attribute to be filtered\n                 * @param {string} [filters[].attributeDisplayForm] The display form of the attribute that will be filtered. This is required if you do not provide attribute\n                 * @param {string} filters[].value The filter value\n                 * @return {CallExpression} A promise to return the result of the report as an Object\n                 */\n                self.executeReport = function (reportIdentifier, filters) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            executeReport(context, reportIdentifier, filters).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                /**\n                 * Executes a report that returns a single data value\n                 * @method getHeadlineReportData\n                 * @param {string} reportIdentifier Identifier for the report\n                 * @param {Object[]} filters Filters for the report\n                 * @param {string} [filters[].attribute] The name of the attribute to be filtered\n                 * @param {string} [filters[].attributeDisplayForm] The display form of the attribute that will be filtered. This is required if you do not provide attribute\n                 * @param {string} filters[].value The filter value\n                 * @return {CallExpression} A promise to return the result of the report as a single string\n                 */\n                self.getHeadlineReportData = function (reportIdentifier, filters) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            executeReport(context, reportIdentifier, filters).then(function (data) {\n                                resolve(getHeadlineDataResults(data));\n                            }).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                /**\n                 * Gets an object that can be used to drill into the context of a headline report\n                 * @method getHeadlineReportDrillContext\n                 * @param {string} reportIdentifier Identifier for the report\n                 * @param {Object[]} filters Filters for the report\n                 * @param {string} [filters[].attribute] The name of the attribute to be filtered\n                 * @param {string} [filters[].attributeDisplayForm] The display form of the attribute that will be filtered. This is required if you do not provide attribute\n                 * @param {string} filters[].value The filter value\n                 * @return {CallExpression} A promise that will return an object to be used to drill into the context of a headline report\n                 */\n                self.getHeadlineReportDrillContext = function (reportIdentifier, filters) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            getHeadlineReportDrillContext(context, reportIdentifier, filters).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                /**\n                 * Load the drilled in records from a context\n                 * @method loadDrillInRecordIds\n                 * @param {Object} drillContext Context from the getHeadlineReportDrillContext or from a Data Mart directive\n                 * @return {CallExpression} A promise to return the drilled in records object\n                 */\n                self.loadDrillInRecordIds = function (drillContext) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            loadDrillInRecordIds(context, drillContext).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                /**\n                 * Gets the latest report definition\n                 * @method getLatestReportDefinition\n                 * @param {string} reportIdentifier Identifier for the report\n                 * @return {CallExpression} A promise to return the most recent definition of the report as an object\n                 */\n                self.getLatestReportDefinition = function (reportIdentifier) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            getLatestReportDefinition(context, reportIdentifier).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                /**\n                 * Get an object definition by a URI\n                 * @method getObjectDefinitionByUri\n                 * @param {string} objectUri URI of the object\n                 * @return {CallExpression} A promise to return the object based on a URI\n                 */\n                self.getObjectDefinitionByUri = function (objectUri) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            getObjectDefinitionByUri(context, objectUri).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n                \n                /**\n                 * Maintains the authentication\n                 * @method maintainAuthentication\n                 * @param {Object} scope\n                 * @return {CallExpression} A promise to let you know when the authentication is maintained\n                 */\n                self.maintainAuthentication = function (scope) {\n                    return authentication.maintainAuthentication(scope);\n                };\n\n            };\n\n            return BBDataMartAPI;\n        }]);\n}());",
    "/*jslint browser: false */\n/*global angular, setInterval, clearInterval */\n\n(function () {\n    'use strict';\n    //JSDoc Module Heading, YAML Title, YAML Description\n    /**\n     * @module npi-datamart.authentication\n     * @title Data Mart Authentication\n     * @description Module for handling Single Sign-On\n     */\n    angular.module('npi-datamart.authentication', [])\n        .factory('BBDataMartAuthentication', ['$q', '$http', '$rootScope', function ($q, $http, $rootScope) {\n            /**\n             * An Angular Factory to create BBDataMartAuthentication objects\n             * @method BBDataMartAuthentication\n             * @param {Object} options Object containing the information for domain and single sign on\n             * @param {string} [options.domain] The domain.\n             * @param {Function} [options.getDomain] A promise returning the domain. Required if options.domain is not specified.\n             * @param {string} [options.ssoProvider] the SSO provider.\n             * @param {Function} [options.getSSOProvider] A promise returning the SSO provider. Required if options.ssoProvider is not specified.\n             * @param {Function} options.getSSOToken A promise returning the SSO token.\n             * @return {BBDataMartAuthentication} The class containing methods to handle authentication on the Data Mart API\n             */\n            var BBDataMartAuthentication = function (options) {\n                var ensureAuthenticatedPromise,\n                    initialAuthPerformed,\n                    maintainAuthScopeCount = 0,\n                    self = this;\n\n                options = options || {};\n\n                if (!options.domain && !options.getDomain) {\n                    throw 'An option for domain or getDomain must be provided';\n                }\n\n                if (!options.ssoProvider && !options.getSSOProvider) {\n                    throw 'An option for ssoProvider or getSSOProvider must be provided';\n                }\n\n                if (!options.getSSOToken) {\n                    throw 'An option for getSSOToken must be provided.  This should be a function returning a promise for an SSO token to be used to authenticate with the data mart API.';\n                }\n\n                /**\n                 * Gets the domain of the environment \n                 * @method getDomain\n                 * @return {CallExpression} A promise to get the domain of the environment\n                 */\n                self.getDomain = function getDomain() {\n                    return $q(function (resolve, reject) {\n                        if (options.domain) {\n                            resolve(options.domain);\n                        } else {\n                            options.getDomain().then(resolve).catch(reject);\n                        }\n                    });\n                };\n                \n                function getSSOProvider() {\n                    return $q(function (resolve, reject) {\n                        if (options.ssoProvider) {\n                            resolve(options.ssoProvider);\n                        } else {\n                            options.getSSOProvider().then(resolve).catch(reject);\n                        }\n                    });\n                }\n\n                function getSSORequest(targetUrl) {\n                    return $q(function (resolve, reject) {\n                        var tasks = [\n                            options.getSSOToken(),\n                            self.getDomain(),\n                            getSSOProvider()\n                        ];\n\n                        $q.all(tasks).then(function (values) {\n                            var ssoRequest = {},\n                                reportRootPath,\n                                ssoToken,\n                                ssoProvider;\n\n                            ssoToken = values[0];\n                            reportRootPath = values[1];\n                            ssoProvider = values[2];\n                            \n                            if (ssoToken && ssoProvider) {\n                                ssoRequest.url = reportRootPath + \"/gdc/account/customerlogin\";\n\n                                ssoRequest.data = {\n                                    targetUrl: targetUrl,\n                                    ssoProvider: ssoProvider,\n                                    encryptedClaims: ssoToken\n                                };\n\n                                resolve(ssoRequest);\n                            }\n\n                        }).catch(reject);\n                    });\n                }\n\n                function isUnauthorizedFailure(reason) {\n                    return reason && reason.status === 401;\n                }\n\n                function getTemporaryToken() {\n                    return $q(function (resolve, reject) {\n                        self.getDomain().then(function (domain) {\n                            var getTokenUrl = domain + '/gdc/account/token';\n                            $http.get(getTokenUrl, { withCredentials: true }).then(function () {\n                                resolve();\n                            }).catch(reject);\n                        }).catch(reject);\n                    });\n                }\n\n                function authenticate() {\n                    return $q(function (resolve, reject) {\n                        getSSORequest('/gdc/account/token').then(function (ssoRequest) {\n                            $http({\n                                method: 'POST',\n                                withCredentials: true,\n                                url: ssoRequest.url,\n                                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                                transformRequest: function (obj) {\n                                    var p,\n                                        str = [];\n\n                                    for (p in obj) {\n                                        if (obj.hasOwnProperty(p)) {\n                                            str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n                                        }\n                                    }\n                                    \n                                    return str.join(\"&\");\n                                },\n                                data: ssoRequest.data\n                            }).then(function () {\n                                resolve();\n                            }).catch(function () {\n                                //The request for single sign on failed.  In some cases, such as Google Chrome on iOS, this request\n                                //may have actually succesfully logged the user in but the load request goes to the catch block because\n                                //of CORS issues.  While not confirmed, this seems to possibly be due to an issue with the fact that\n                                //the SSO request returns a 302 to a separate route that then returns a 200.  Due to a browser bug,\n                                //the request to the second route may not be including the origin header resulting in a CORS failure.\n                                //To better handle that scenario, make a separate call to get an Temporary Token which will either\n                                //fail with a 401 or return with a 200 (no 302 redirect needed).  If this succeeds, the SSO was a success.\n                                //Otherwise it was a failure.\n                                getTemporaryToken().then(function () {\n                                    resolve();\n                                }).catch(reject);\n                            });\n\n                        }).catch(reject);\n                    });\n                }\n\n                function ensureTemporaryToken() {\n                    return $q(function (resolve, reject) {\n                        getTemporaryToken().then(function () {\n                            resolve();\n                        }).catch(function (reason) {\n                            if (isUnauthorizedFailure(reason)) {\n                                authenticate().then(function () {\n                                    resolve();\n                                }).catch(reject);\n                            } else {\n                                reject(reason);\n                            }\n                        });\n                    });\n                }\n                \n                /**\n                 * Ensures that the client maintains an authenticated token \n                 * @method ensureAuthenticated\n                 * @return {ensureAuthenticatedPromise} A promise to ensure authentication \n                 */\n                self.ensureAuthenticated = function ensureAuthenticated() {\n                    if (!ensureAuthenticatedPromise) {\n                        ensureAuthenticatedPromise = $q(function (resolve, reject) {\n                            var getTokenPromise;\n\n                            if (initialAuthPerformed) {\n                                getTokenPromise = ensureTemporaryToken();\n                            } else {\n                                initialAuthPerformed = true;\n                                getTokenPromise = authenticate();\n                            }\n\n                            getTokenPromise.then(function () {\n                                //The token will expire after 10 minutes.  Clear the promise after 8 minutes to ensure any request after that\n                                //will force the token to be renewed.\n                                var intervalHandle,\n                                    promiseClearTime = (new Date()).getTime() + 480000;\n\n                                //Check back every second to compare current time to the clear time.  Using a frequent interval with a time check\n                                //instead of a timeout because timeout is not reliable in scenarios such as hibernation.  This is needed to ensure\n                                //we will try to authenticate ASAP after the token has expired.\n                                //NOTE: This intentionally uses setInterval instead of $Interval to avoid a digest cycle every second\n                                intervalHandle = setInterval(function () {\n                                    if ((new Date()).getTime() > promiseClearTime) {\n                                        clearInterval(intervalHandle);\n                                        ensureAuthenticatedPromise = null;\n                                        if (maintainAuthScopeCount > 0) {\n                                            $rootScope.$apply(function () {\n                                                ensureAuthenticated();\n                                            });\n                                        }\n                                    }\n                                }, 1000);\n                                resolve();\n                            }).catch(function (reason) {\n                                //Remove the cached ensureAuthenticatedPromise since it failed.  That way it will\n                                //be executed again at the next request.\n                                ensureAuthenticatedPromise = null;\n                                reject(reason);\n                            });\n                        });\n                    }\n\n                    return ensureAuthenticatedPromise;\n                };\n\n                /**\n                 * Ensures that the API is currently authenticated and will ensure the API maintains authentication tokens until the specified scope is destroyed\n                 * @method maintainAuthentication\n                 * @param {Object} $scope\n                 * @return {CallExpression} A promise to maintain authentication\n                 */\n                self.maintainAuthentication = function maintainAuthentication($scope) {\n                    //Increment the number of scopes requesting that authentication be maintained.\n                    maintainAuthScopeCount += 1;\n\n                    //When the scope is destroyed, decrement the count.\n                    $scope.$on('$destroy', function () {\n                        maintainAuthScopeCount -= 1;\n                    });\n\n                    //Return a promise once authentication has been ensured.\n                    return $q(function (resolve, reject) {\n                        self.ensureAuthenticated().then(function () {\n                            resolve();\n                        }).catch(reject);\n                    });\n                };\n\n            };\n\n            return BBDataMartAuthentication;\n        }]);\n}());",
    "/*jslint browser: false */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var DASHBOARD_STYLES = {\n        \"dashboardStylist\": {\n            \"skin\": {\n                //Hide lock button on embedded dashboards for users in Editor role.\n                \".dashboardHeader .yui3-lockbutton\": {\n                    \"display\": \"none\"\n                },\n                \"body.white\": {\n                    \"background\": \"#f3f3f4\"\n                },\n                \".yui3-c-textdashboardwidget-middleText .yui3-c-textdashboardwidget-ipe, .yui3-c-textdashboardwidget-middleText .yui3-c-textdashboardwidget-label\": {\n                    \"font-size\": \"22px\",\n                    \"color\": \"#292a2b\",\n                    \"font-family\": \"Oswald\",\n                    \"font-weight\": \"100\",\n                    \"height\": \"40px\"\n                },\n                \".yui3-c-textdashboardwidget-smallText .yui3-c-textdashboardwidget-ipe, .yui3-c-textdashboardwidget-smallText .yui3-c-textdashboardwidget-label\": {\n                    \"font-size\": \"14px\",\n                    \"color\": \"#292a2b\",\n                    \"font-weight\": \"600\"\n                },\n                \".yui3-c-onenumberreport .description\": {\n                    \"font-size\": \"13px !important\",\n                    \"line-height\": \"normal\",\n                    \"color\": \"#292a2b\"\n                },\n                \".yui3-c-onenumberreport .number\": {\n                    \"font-size\": \"26px !important\",\n                    \"font-family\": \"Oswald\",\n                    \"line-height\": \"normal\",\n                    \"color\": \"#292a2b\"\n                },\n                \".yui3-c-tabfilteritem .filterItemTitle, .yui3-c-dashboardwidget-editMode .yui3-c-tabfilteritem .titleContainer input\": {\n                    \"text-transform\": \"none\",\n                    \"font-size\": \"12px\",\n                    \"color\": \"#292a2b\"\n                },\n                \"body\": {\n                    \"font-family\": \"Open Sans\"\n                },\n                \"text\": {\n                    \"font-family\": \"Open Sans\"\n                },\n                \".yui3-c-linedashboardwidget .lineContent\": {\n                    \"background\": \"#e7eaec\",\n                    \"left\": \"0px\"\n                }\n            },\n            \"extraFonts\": { 'googlefonts': ['Oswald', 'Open Sans'] }\n        }\n    };\n    //JSDoc Module Heading, YAML Title, YAML Description\n    /**\n     * @module npi-datamart.report\n     * @title Data Mart Report\n     * @description Module for embedding dashboards and reports on a page\n     */\n    angular.module('npi-datamart.report', ['npi-datamart.templates', 'npi-datamart.api', 'sky'])\n        /**\n         * @name bbDataMartReportConfiguration\n         * @description Constant used to configure application-wide behavior for the directives in the  `npi-datamart.report` module. Some options must be specified in order to use the directives, while others are optional.\n         * @param {Object} api Must be set to an instance of `BBDataMartAPI` that directives should use to work with the Data Mart API in order to authenticate and display reports and dashboards.\n         * @param {function} [linkHandler] A function that will handle links clicked in a report or dashboard. When a link is clicked, the function will be called and provided the link's targe URL.\n         * @param {function} [drillHandler] A function that will handle drill operations in a report or dashboard. When a drill event is triggered, the function will be called and provided the drill context from the event.\n         * @param {Object} [processFilters] Hook for pre-processing filters provided to a report or dashboard directive. This can be used to have more product-friendly naming of filters within the product code that supplies filters to the directives.  This hook allows these filters to be translated into the names expected by the data mart project before being used.\n         */\n        .constant('bbDataMartReportConfiguration', {\n            api: null, //Set to an instance of BBDataMartAPI to use by default for all directives it not otherwise specified                        \n            linkHandler: null, //Optionally set to function to handle when links are clicked in the dashboards and reports\n            drillHandler: null, //Optionally set to function to handle drill events from reports\n            processFilters: null //Optional hook for preprocessing of filters\n        })\n        .service('bbDataMartReportService', ['bbDataMartReportConfiguration', '$sce', '$window', '$q', '$timeout', 'bbHelp', function (bbDataMartReportConfiguration, $sce, $window, $q, $timeout, bbHelp) {\n            var windowIsiOS;\n\n            function isiOS() {\n                if (windowIsiOS === undefined) {\n                    windowIsiOS = (/iPad|iPod|iPhone/i.test($window.navigator.userAgent));\n                }\n\n                return windowIsiOS;\n            }\n\n            function getAPI($scope) {\n                return $scope.api || bbDataMartReportConfiguration.api;\n            }\n\n            function emeddedObjectController($scope, isDashboard) {\n                var api = getAPI($scope);\n\n                api.maintainAuthentication($scope).then(function () {\n                    var windowEl = angular.element($window),\n                        windowEventId = $scope.$id;\n\n                    function getEmbedUrl(objectId, filters, isDashboard, handleDrill) {\n                        return $q(function (resolve) {\n                            var tasks = [\n                                api.getDataMartId(),\n                                api.getObjectUriFromIdentifier(objectId),\n                                api.getApiRoot()\n                            ];\n\n                            if (filters && bbDataMartReportConfiguration.processFilters) {\n                                tasks.push(bbDataMartReportConfiguration.processFilters(filters));\n                            }\n\n                            $q.all(tasks).then(function (values) {\n                                var projectId,\n                                    objectPath,\n                                    reportUrl,\n                                    domain;\n\n                                projectId = values[0];\n                                objectPath = values[1];\n                                domain = values[2];\n\n                                if (values[3]) {\n                                    filters = values[3];\n                                }\n\n                                if (projectId && objectPath && domain) {\n                                    if (isDashboard) {\n                                        reportUrl = '/dashboard.html?';\n                                    } else {\n                                        reportUrl = '/reportWidget.html?';\n                                    }\n\n                                    if (filters) {\n                                        angular.forEach(filters, function (value, key) {\n                                            reportUrl += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\n                                        });\n                                    }\n\n                                    reportUrl += '#project=/gdc/projects/';\n                                    reportUrl += projectId;\n\n                                    if (isDashboard) {\n                                        reportUrl += '&dashboard=';\n                                    } else {\n                                        reportUrl += '&report=';\n                                    }\n\n                                    reportUrl += objectPath;\n                                    reportUrl += \"&title=no&override=ui.frameinfo\";\n\n                                    if (bbDataMartReportConfiguration.linkHandler) {\n                                        reportUrl += \",ui.link\";\n                                    }\n\n                                    if (handleDrill) {\n                                        reportUrl += \",ui.drill\";\n                                    }\n\n                                    if ($scope.noChrome) {\n                                        reportUrl += \"&nochrome=true\";\n                                    }\n\n                                    if (isDashboard) {\n                                        reportUrl = domain + '/labs/apps/dashboard_stylist/embed.html?width=100%25&src=' + encodeURIComponent(reportUrl);\n                                    } else {\n                                        reportUrl = domain + reportUrl;\n                                    }\n\n                                    resolve(reportUrl);\n                                }\n                            });\n                        });\n                    }\n\n                    function setiFrameUrl() {\n                        $scope.frameUrl = null;\n                        getEmbedUrl($scope.embeddedObjectId, $scope.filters, isDashboard, $scope.drillHandler || bbDataMartReportConfiguration.drillHandler).then(function (url) {\n                            $scope.frameUrl = $sce.trustAsResourceUrl(url);\n                        });\n                    }\n\n                    function resetiFrameUrl() {\n                        $scope.frameUrl = null;\n                        $timeout(function () {\n                            setiFrameUrl();\n                        });\n                    }\n\n                    $scope.$watch('embeddedObjectId', resetiFrameUrl);\n\n                    $scope.$watch('filters', resetiFrameUrl, true);\n\n                    setiFrameUrl();\n                    \n                    if (isiOS()) {\n                        //When the orientation changes on iOS, there is a GoodData bug that causes the report to not be resized correctly.  Reset\n                        //the iFrame URL to force it to refresh.\n                        windowEl.on('orientationchange.' + windowEventId, resetiFrameUrl);\n                    }\n\n                    $scope.handleFrameEvent = function (message) {\n                        if (message.type === 'app.ok' && message.name === 'ui.frameinfo') {\n                            if (isDashboard && message.data && message.data.height) {\n                                //Adding an additional buffer to the height to account for height addd by the dashboard stylist wrapper.\n                                $scope.frameHeight = (message.data.height + 20) + 'px';\n                            }\n                        } else if (message.type === 'app.event') {\n                            if (message.name === 'ui.drill') {\n                                if ($scope.drillHandler) {\n                                    $scope.drillHandler(message.data);\n                                } else if (bbDataMartReportConfiguration.drillHandler) {\n                                    bbDataMartReportConfiguration.drillHandler(message.data);\n                                }\n                            } else if (message.name === 'ui.link' && message.data && message.data.uri) {\n                                bbDataMartReportConfiguration.linkHandler(message.data.uri);\n                            }\n                        }\n                    };\n\n                    $scope.$on('$destroy', function () {\n                        windowEl.off('orientationchange.' + windowEventId);\n                    });\n                });\n            }\n\n            function designerController($scope) {\n                var api = getAPI($scope);\n\n                api.maintainAuthentication($scope).then(function () {\n                    function getEmbedUrl() {\n                        return $q(function (resolve) {\n                            var tasks = [\n                                api.getDataMartId(),\n                                api.getApiRoot()\n                            ];\n\n                            $q.all(tasks).then(function (values) {\n                                var projectId,\n                                    reportUrl,\n                                    domain;\n\n                                projectId = values[0];\n                                domain = values[1];\n\n                                if (projectId && domain) {\n                                    reportUrl = domain + '/analyze/embedded/#/';\n                                    reportUrl += projectId;\n                                    reportUrl += '/reportId/edit';\n                                    resolve(reportUrl);\n                                }\n                            });\n                        });\n                    }\n\n                    function setiFrameUrl() {\n                        $scope.frameUrl = null;\n                        getEmbedUrl().then(function (url) {\n                            $scope.frameUrl = $sce.trustAsResourceUrl(url);\n                        });\n                    }\n\n                    setiFrameUrl();\n                });\n            }\n\n            function kpiDashboardController($scope) {\n                var api = getAPI($scope);\n\n                api.maintainAuthentication($scope).then(function () {\n                    function getEmbedUrl() {\n                        return $q(function (resolve) {\n                            var tasks = [\n                                api.getDataMartId(),\n                                api.getApiRoot()\n                            ];\n\n                            $q.all(tasks).then(function (values) {\n                                var projectId,\n                                    reportUrl,\n                                    domain;\n\n                                projectId = values[0];\n                                domain = values[1];\n\n                                if (projectId && domain) {\n                                    reportUrl = domain + '/dashboards/embedded/#/project/';\n                                    reportUrl += projectId;\n                                    \n                                    if ($scope.multiple) {\n                                        reportUrl += '?showNavigation=true';\n                                    }\n                                    \n                                    resolve(reportUrl);\n                                }\n                            });\n                        });\n                    }\n\n                    function setiFrameUrl() {\n                        $scope.frameUrl = null;\n                        getEmbedUrl().then(function (url) {\n                            $scope.frameUrl = $sce.trustAsResourceUrl(url);\n                        });\n                    }\n\n                    setiFrameUrl();\n                });\n\n                $scope.handleFrameEvent = function (message) {\n                    if ($scope.autoSize) {\n                        if (message.event.name === 'resized' && message.event.data && message.event.data.height) {\n                            $scope.frameHeight = (message.event.data.height) + 'px';\n                        }\n                    }\n                };\n            }\n\n            function link($scope, el) {\n                $scope.windowEventCallback = function (e) {\n                    var message;\n\n                    //If the message doesn't target the iFrame in this element, then exit\n                    if (!(el.find('iframe')[0] && el.find('iframe')[0].contentWindow === e.source)) {\n                        if (e.origin === 'https://www.blackbaud.com' && e.data.indexOf('bbHelpKey') > 0) {\n                            message = angular.isString(e.data) ? JSON.parse(e.data) : e.data;\n                            if (message.bbHelpKey) {\n                                bbHelp.open(message.bbHelpKey);\n                            }\n                        }\n                        return;\n                    }\n\n                    if (!$scope.stylesInjected) {\n                        if (e.source) {\n                            $scope.stylesInjected = true;\n                            e.source.postMessage(JSON.stringify(DASHBOARD_STYLES), '*');\n                        }\n                    }\n\n                    message = angular.isString(e.data) ? JSON.parse(e.data) : e.data;\n                    if (message.gdc) {\n                        message = message.gdc;\n\n                        $scope.$apply(function () {\n                            $scope.handleFrameEvent(message);\n                        });\n                    }\n                };\n\n                function windowEventCallback(e) {\n                    $scope.windowEventCallback(e);\n                }\n\n                $window.addEventListener('message', windowEventCallback, false);\n                $scope.$on('$destroy', function () {\n                    $window.removeEventListener('message', windowEventCallback, false);\n                });\n            }\n\n            return {\n                controller: ['$scope', function ($scope) {\n                    emeddedObjectController($scope, false);\n                }],\n                reportController: ['$scope', function ($scope) {\n                    emeddedObjectController($scope, false);\n                }],\n                dashboardController: ['$scope', function ($scope) {\n                    emeddedObjectController($scope, true);\n                }],\n                responsiveDashboardController: ['$scope', 'bbMediaBreakpoints', function ($scope, bbMediaBreakpoints) {\n                    function handleMediaBreakpoint(breakPoints) {\n                        $scope.breakPoints = breakPoints;\n                    }\n\n                    bbMediaBreakpoints.register(handleMediaBreakpoint);\n\n                    $scope.$on('$destroy', function () {\n                        bbMediaBreakpoints.unregister(handleMediaBreakpoint);\n                    });\n                }],\n                designerController: ['$scope', function ($scope) {\n                    designerController($scope);\n                }],\n                kpiDashboardController: ['$scope', function ($scope) {\n                    kpiDashboardController($scope);\n                }],\n                reportLink: link,\n                dashboardLink: link,\n                kpiDashboardLink: link\n            };\n        }])\n        \n        /**\n         * @name bbDataMartReport\n         * @description Directive for displaying a single data mart report on a page. When loaded, the directive will authenticate with the Data Mart API (if not already authenticated) and ensure authentication is maintained until the directive is destroyed. It will show the specified report as an embedded iFrame on the page.\n         * @param {directive} bb-data-mart-report Displays a report as an embedded iFrame.\n         * @param {directive} bb-data-mart-report.bb-data-mart-report-id The report ID of the report to be displayed.\n         * @param {directive} [bb-data-mart-report.bb-data-mart-report-filters] An object describing filters to be applied to the report using the querystring URL filters feature of reports. The keys and values of this object will be applied as filters.  The `bbDataMartReportConfiguration.processFilters` function, if defined, will be executed on the filters object before it is used.\n         * @param {directive} [bb-data-mart-report.bb-data-mart-report-drill-header] Overrides the `bbDataMartReportConfiguration.processFilters` function for a specific directive.\n         * @param {directive} [bb-data-mart-report.height] Sets the height attribute of the iFrame.\n         * @param {directive} [bb-data-mart-report.width] Sets the width attribute of the iFrame.\n         * @param {directive} [bb-data-mart-report.bb-data-mart-report-api] Overrides the default BBDataMartAPI used by the directive.\n         */\n        .directive('bbDataMartReport', ['bbDataMartReportService', function (bbDataMartReportService) {\n            return {\n                replace: true,\n                restrict: 'E',\n                templateUrl: 'templates/datamartreport/embedtemplate.html',\n                scope: {\n                    embeddedObjectId: '=bbDataMartReportId',\n                    filters: '=bbDataMartReportFilters',\n                    drillHandler: '=bbDataMartReportDrillHandler',\n                    frameHeight: '@height',\n                    frameWidth: '@width',\n                    api: '=bbDataMartReportApi'\n                },\n                link: bbDataMartReportService.reportLink,\n                controller: bbDataMartReportService.controller\n            };\n        }])\n        /**\n         * Directive for displaying a report dashboard on a page. When loaded, the directive will authenticate with the Data Mart API (if not already authenticated) and ensure authentication is maintained until the directive is destroyed. It will show the specified dashboard as an embedded iFrame on the page. The height of the iFrame will be set automatically based on the height of the dashboard.\n         * The embedded dashboard will have Sky NPI CSS styles injected to use a Sky look and feel.\n         * The directive also supports embedding help links directly in the dashboards. Clicking these links will cause the Help flyout to open to a specified topic. To embed a help link, use the \"Add Web Content\" feature in the dashboard designer.  For the url, use `https://www.blackbaud.com/files/support/helpfiles/npi/npi_help.html?helpkey=<<INSERT HELP KEY>>.html`. \n         * @name bbDataMartDashboard\n         * @param {directive} bb-data-mart-dashboard\n         * @param {directive} bb-data-mart-dashboard.bb-data-mart-dashboard-id The report ID of the dashboard to be displayed.\n         * @param {directive} [bb-data-mart-dashboard.bb-data-mart-dashboard-filters] An object describing filters to be applied to the dashboard using the querystring URL filters feature of dahboards. The keys and values of this object will be applied as filters.  The `bbDataMartReportConfiguration.processFilters` function, if defined, will be executed on the filters object before it is used.\n         * @param {directive} [bb-data-mart-dashboard.bb-data-mart-dashboard-drill-handler] Overrides the `bbDataMartReportConfiguration.processFilters` function for a specific directive.\n         * @param {directive} [bb-data-mart-dashboard.bb-data-mart-dashboard-no-chrome] If true, does not include the dashboard chrome for saving filters and exporting as PDF.\n         * @param {directive} [bb-data-mart-dashboard.width] Sets the width attribute of the iFrame.\n         * @param {directive} [bb-data-mart-dashboard.bb-data-mart-dashboard-api] Overrides the default BBDataMartAPI used by the directive.\n         */\n        .directive('bbDataMartDashboard', ['bbDataMartReportService', function (bbDataMartReportService) {\n            return {\n                replace: true,\n                restrict: 'E',\n                templateUrl: 'templates/datamartreport/embedtemplate.html',\n                scope: {\n                    embeddedObjectId: '=bbDataMartDashboardId',\n                    filters: '=bbDataMartDashboardFilters',\n                    drillHandler: '=bbDataMartDashboardDrillHandler',\n                    noChrome: '=bbDataMartDashboardNoChrome',\n                    frameWidth: '@width',\n                    api: '=bbDataMartDashboardApi'\n                },\n                link: bbDataMartReportService.dashboardLink,\n                controller: bbDataMartReportService.dashboardController\n            };\n        }])\n        /**\n         * Directive for creating the effect of reponsive design for dashboards. Data Mart dashboards currently have a fixed width design. This directive provides responsive design by allowing different dashboards to be used at different breakpoints.  A collection of dashboards can be designed to show the same or similar reports in different layouts for the different breakpoints, and this directive will display the correct dashboard based on the size of the device.  If the device width changes (for example, due to changing orientation) the dashboard can change as well.\n         * Note that when using a responsive dashboard, the `bb-data-mart-dashboard-no-chrome` option is used to hide the chrome when not viewing on a large (desktop) device.\n         * @name bbDataMartResponsiveDashboard\n         * @param {directive} bb-data-mart-responsive-dashboard\n         * @param {directive} [bb-data-mart-responsive-dashboard.bb-data-mart-responsive-dashboard-xs The dashboard id of the dashboard to display on extra small devices (phone).\n         * @param {directive} [bb-data-mart-responsive-dashboard.bb-data-mart-responsive-dashboard-sm The dashboard id of the dashboard to display on small devices (portait tablets).\n         * @param {directive} [bb-data-mart-responsive-dashboard.bb-data-mart-responsive-dashboard-lg The dashboard id of the dashboard to display on medium (landscape tablets) and large devices (desktop).  There is no distinction between medium and large devices because the maximum size of a dashboard already fits on the medium device width.\n         * @param {directive} [bb-data-mart-responsive-dashboard.bb-data-mart-responsive-dashboard-drill-handler] Overrides the `bbDataMartReportConfiguration.processFilters` function for a specific directive.\n         * @param {directive} [bb-data-mart-responsive-dashboard.bb-data-mart-responsive-dashboard-api] Overrides the default BBDataMartAPI used by the directive. \n         */\n        .directive('bbDataMartResponsiveDashboard', ['bbDataMartReportService', function (bbDataMartReportService) {\n            return {\n                replace: true,\n                restrict: 'E',\n                templateUrl: 'templates/datamartreport/responsivedashboard.html',\n                scope: {\n                    xsId: '=bbDataMartResponsiveDashboardXs',\n                    smId: '=bbDataMartResponsiveDashboardSm',\n                    lgId: '=bbDataMartResponsiveDashboardLg',\n                    drillHandler: '=bbDataMartResponsiveDashboardDrillHandler',\n                    api: '=bbDataMartResponsiveDashboardApi'\n                },\n                controller: bbDataMartReportService.responsiveDashboardController\n            };\n        }])\n        /**\n         * Directive for displaying the analytical designer. \n        * @description Directive for displaying the analytical designer on a page. When loaded, the directive will authenticate with the Data Mart API (if not already authenticated) and ensure authentication is maintained until the directive is destroyed. It will show the analytical designer\n        as an embedded iFrame on the page.\n         * @name bbDataMartDesigner\n         * @param {directive} bb-data-mart-designer\n         * @param {directive} [bb-data-mart-designer.height] Sets the height attribute of the iFrame.\n         * @param {directive} [bb-data-mart-designer.width] Sets the width attribute of the iFrame.\n         * @param {directive} [bb-data-mart-designer.bb-data-mart-designer-api] Overrides the default BBDataMartAPI used by the directive.\n         */\n        .directive('bbDataMartDesigner', ['bbDataMartReportService', function (bbDataMartReportService) {\n            return {\n                replace: true,\n                restrict: 'E',\n                templateUrl: 'templates/datamartreport/embedtemplate.html',\n                scope: {\n                    frameHeight: '@height',\n                    frameWidth: '@width',\n                    api: '=bbDataMartDesignerApi'\n                },\n                controller: bbDataMartReportService.designerController\n            };\n        }])\n        /**\n        * Directive for displaying the KPI Dashboard. \n        * @description Directive for displaying the KPI Dashboard on a page. When loaded, the directive will authenticate with the Data Mart API (if not already authenticated) and ensure authentication is maintained until the directive is destroyed. It will show the KPI Dashboard\n        as an embedded iFrame on the page.\n         * @name bbDataMartKpiDashboard\n         * @param {directive} bb-data-mart-kpi-dashboard\n         * @param {directive} [bb-data-mart-kpi-dashboard.height] Sets the height attribute of the iFrame.\n         * @param {directive} [bb-data-mart-kpi-dashboard.width] Sets the width attribute of the iFrame.\n         * @param {directive} [bb-data-mart-kpi-dashboard.bb-data-mart-kpi-dashboard-multiple] If true, allows creating and editing multiple dashboards.\n         * @param {directive} [bb-data-mart-kpi-dashboard.bb-data-mart-designer-api] Overrides the default BBDataMartAPI used by the directive.\n         */\n        .directive('bbDataMartKpiDashboard', ['bbDataMartReportService', function (bbDataMartReportService) {\n            return {\n                replace: true,\n                restrict: 'E',\n                templateUrl: 'templates/datamartreport/embedtemplate.html',\n                scope: {\n                    frameHeight: '@height',\n                    frameWidth: '@width',\n                    multiple: '=bbDataMartKpiDashboardMultiple',\n                    autoSize: '=bbDataMartKpiDashboardAutoSize',\n                    api: '=bbDataMartKpiDashboardApi'\n                },\n                link: bbDataMartReportService.kpiDashboardLink,\n                controller: bbDataMartReportService.kpiDashboardController\n            };\n        }]);\n}());",
    "/*jslint browser: false */\n/*global angular*/\n\n(function () {\n    'use strict';\n    \n    var modules = [\n        //'sky',\n        'npi-datamart.authentication',\n        'npi-datamart.api',\n        'npi-datamart.report',\n        'npi-datamart.templates'\n    ];\n\n    angular.module('npi-datamart', modules);\n}());",
    "angular.module('npi-datamart.templates', []).run(['$templateCache', function($templateCache) {\n    $templateCache.put('templates/datamartreport/embedtemplate.html',\n        '<div>\\n' +\n        '  <iframe height=\"{{frameHeight}}\" width=\"{{frameWidth}}\" ng-if=\"frameUrl\" ng-src=\"{{frameUrl}}\" frameborder=\"0\" allowtransparency=\"false\"></iframe>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('templates/datamartreport/responsivedashboard.html',\n        '<div style=\"text-align:center\">\\n' +\n        '  <div ng-if=\"breakPoints.xs\">\\n' +\n        '    <bb-data-mart-dashboard bb-data-mart-dashboard-api=\"api\" bb-data-mart-dashboard-drill-handler=\"drillHandler\" bb-data-mart-dashboard-id=\"xsId\" width=\"340px\" bb-data-mart-dashboard-no-chrome=\"true\"></bb-data-mart-dashboard>\\n' +\n        '  </div>\\n' +\n        '  <div ng-if=\"breakPoints.sm\">\\n' +\n        '    <bb-data-mart-dashboard bb-data-mart-dashboard-api=\"api\" bb-data-mart-dashboard-drill-handler=\"drillHandler\" bb-data-mart-dashboard-id=\"smId\" width=\"776px\" bb-data-mart-dashboard-no-chrome=\"true\"></bb-data-mart-dashboard>\\n' +\n        '  </div>\\n' +\n        '  <div ng-if=\"breakPoints.md\">\\n' +\n        '    <bb-data-mart-dashboard bb-data-mart-dashboard-api=\"api\" bb-data-mart-dashboard-drill-handler=\"drillHandler\" bb-data-mart-dashboard-id=\"lgId\" width=\"100%\"  bb-data-mart-dashboard-no-chrome=\"true\"></bb-data-mart-dashboard>\\n' +\n        '  </div>\\n' +\n        '  <div ng-if=\"breakPoints.lg\">\\n' +\n        '    <bb-data-mart-dashboard bb-data-mart-dashboard-api=\"api\" bb-data-mart-dashboard-drill-handler=\"drillHandler\" bb-data-mart-dashboard-id=\"lgId\" width=\"100%\"></bb-data-mart-dashboard>\\n' +\n        '  </div>\\n' +\n        '</div>\\n' +\n        '');\n}]);\n"
  ]
}