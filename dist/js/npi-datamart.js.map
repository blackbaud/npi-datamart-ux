{
  "version": 3,
  "file": "npi-datamart.js",
  "sources": [
    "js/src/datamartapi/datamartapi.js",
    "js/src/datamartauthentication/datamartauthentication.js",
    "js/src/module.js",
    "js/templates/templates.js.tmp"
  ],
  "names": [],
  "mappingsgjNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;A",
  "sourceRoot": "../..",
  "sourcesContent": [
    "/*jslint browser: false */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    //Use this module (or something like it) in the library angular.module('npi-datamart.authentication', [])\n    angular.module('npi-datamart.api', [])\n        .factory('BBDataMartAPI', ['$q', '$timeout', '$http', function ($q, $timeout, $http) {\n            var BBDataMartAPI = function (options) {\n                var apiContextPromise,\n                    authentication,\n                    objectUriPromises = {},\n                    self = this;\n\n                options = options || {};\n                authentication = options.authentication;\n\n                if (!authentication) {\n                    throw 'An option for authentication must be provided.  This should be a BBDataMartAuthentication used to authenticate with the data mart API.';\n                }\n\n                if (!options.dataMartId && !options.getDataMartId) {\n                    throw 'An option for dataMartId or getDataMartId must be provided';\n                }\n\n                function getDataMartId() {\n                    return $q(function (resolve, reject) {\n                        if (options.dataMartId) {\n                            resolve(options.dataMartId);\n                        } else {\n                            options.getDataMartId().then(resolve).catch(reject);\n                        }\n                    });\n                }\n\n                function getApiRoot() {\n                    return authentication.getDomain();\n                }\n\n                function getAPIContext() {\n                    if (!apiContextPromise) {\n                        apiContextPromise = $q(function (resolve, reject) {\n                            getApiRoot().then(function (apiRoot) {\n                                getDataMartId().then(function (dataMartId) {\n                                    resolve({\n                                        apiRoot: apiRoot,\n                                        dataMartId: dataMartId\n                                    });\n                                }).catch(reject);\n                            }).catch(reject);\n                        });\n                    }\n                    return apiContextPromise;\n                }\n\n                function ensureAuthenticatedContext() {\n                    return $q(function (resolve, reject) {\n                        authentication.ensureAuthenticated().then(function () {\n                            getAPIContext().then(function (context) {\n                                resolve(context);\n                            }).catch(reject);\n                        }).catch(reject);\n                    });\n                }\n\n                function getObjectUriFromIdentifier(context, objectIdentifier) {\n                    if (!objectUriPromises[objectIdentifier]) {\n                        objectUriPromises[objectIdentifier] = $q(function (resolve, reject) {\n                            function lookupUriForObjectId(id) {\n                                var postData = {\n                                    identifierToUri: [id]\n                                };\n\n                                $http.post(context.apiRoot + '/gdc/md/' + context.dataMartId + '/identifiers', postData, {\n                                    withCredentials: true\n                                }).then(function (result) {\n                                    if (result.data && result.data.identifiers && result.data.identifiers[0] && result.data.identifiers[0].uri) {\n                                        resolve(result.data.identifiers[0].uri);\n                                    } else {\n                                        reject();\n                                    }\n                                }).catch(reject);\n                            }\n\n                            if (options.translateObjectIdentifier) {\n                                options.translateObjectIdentifier(objectIdentifier).then(function (id) {\n                                    lookupUriForObjectId(id);\n                                }).catch(reject);\n                            } else {\n                                lookupUriForObjectId(objectIdentifier);\n                            }\n                        });\n                    }\n\n                    return objectUriPromises[objectIdentifier];\n                }\n\n                function getObjectDefinitionByUri(context, objectUri) {\n                    return $q(function (resolve, reject) {\n                        $http.get(context.apiRoot + objectUri, {\n                            withCredentials: true\n                        }).then(function (result) {\n                            if (result.data) {\n                                resolve(result.data);\n                            } else {\n                                reject();\n                            }\n                        }).catch(reject);\n                    });\n                }\n\n                function getSingleElementUri(context, elementsUri, elementValue) {\n                    var i,\n                        el,\n                        elementUri = null;\n\n                    return $q(function (resolve, reject) {\n                        $http.get(context.apiRoot + elementsUri + '?filter=' + elementValue, {\n                            withCredentials: true\n                        }).then(function (result) {\n                            if (result.data && result.data.attributeElements && result.data.attributeElements.elements) {\n                                for (i = 0; i < result.data.attributeElements.elements.length; i += 1) {\n                                    el = result.data.attributeElements.elements[i];\n                                    if (el.title.toString() === elementValue.toString()) {\n                                        elementUri = el.uri;\n                                        break;\n                                    }\n                                }\n\n                                resolve(elementUri);\n                            }\n                            resolve(null);\n                        }).catch(reject);\n                    });\n                }\n\n                function getAttributeName(attribute) {\n                    if (options.translateAttributeName) {\n                        return options.translateAttributeName(attribute);\n                    }\n\n                    return attribute;\n                }\n\n                function getObjectIdentifierDisplayForm(attribute) {\n                    var identifier = null;\n\n                    if (attribute) {\n                        if (attribute.lastIndexOf('attr.', 0) === 0) {\n                            identifier = attribute.replace('attr.', 'label.');\n                        } else {\n                            identifier = 'label.' + attribute;\n                        }\n                    }\n\n                    return identifier;\n                }\n\n                function getDataResults(context, dataResultsUri, skipRetry) {\n                    return $q(function (resolve, reject) {\n                        $http.get(context.apiRoot + dataResultsUri, {\n                            withCredentials: true\n                        }).then(function (result) {\n                            if (!skipRetry && result.data && !result.data.xtab_data) {\n                                $timeout(function () {\n                                    resolve(getDataResults(context, dataResultsUri, false));\n                                }, 3000);\n                            } else {\n                                resolve(result);\n                            }\n                        }).catch(reject);\n                    });\n                }\n\n                function executeReportByPostData(context, postData) {\n                    return $q(function (resolve, reject) {\n                        $http.post(context.apiRoot + '/gdc/app/projects/' + context.dataMartId + '/execute', postData, {\n                            withCredentials: true\n                        }).then(function (result) {\n                            if (result.data && result.data.execResult && result.data.execResult.dataResult) {\n                                resolve(getDataResults(context, result.data.execResult.dataResult));\n                            } else {\n                                reject();\n                            }\n                        }).catch(reject);\n                    });\n                }\n\n                function buildElementFilter(context, filter, objectDisplayFormUri) {\n                    var filterObj = {\n                        uri: objectDisplayFormUri,\n                        constraint: {\n                            type: 'list'\n                        }\n                    },\n                        i,\n                        tasks = [],\n                        values;\n\n                    return $q(function (resolve) {\n                        if (filter.value) {\n                            if (!Array.isArray(filter.value)) {\n                                values = [filter.value];\n                            } else {\n                                values = filter.value;\n                            }\n\n                            for (i = 0; i < values.length; i += 1) {\n                                tasks.push(getSingleElementUri(context, objectDisplayFormUri + '/elements', values[i]));\n                            }\n                            if (tasks.length > 0) {\n                                $q.all(tasks).then(function (objectElements) {\n                                    filterObj.constraint.elements = objectElements;\n                                    resolve(filterObj);\n                                });\n                            } else {\n                                resolve(null);\n                            }\n                        } else {\n                            resolve(null);\n                        }\n                    });\n                }\n\n                function buildReportRequestContext(context, filters) {\n                    return $q(function (resolve, reject) {\n                        var attributeDisplayForm,\n                            i,\n                            tasks = [];\n\n                        function buildContext(filters) {\n                            var reportRequestContext = {};\n\n                            for (i = 0; i < filters.length; i += 1) {\n                                if (filters[i].attribute) {\n                                    attributeDisplayForm = getObjectIdentifierDisplayForm(getAttributeName(filters[i].attribute));\n                                } else {\n                                    attributeDisplayForm = filters[i].attributeDisplayForm;\n                                }\n\n                                if (attributeDisplayForm) {\n                                    tasks.push(getObjectUriFromIdentifier(context, attributeDisplayForm));\n                                } else {\n                                    throw new Error('Filter must have an attribute or attribute display form specified');\n                                }\n                            }\n\n                            //resolve display form uri for all filters\n                            $q.all(tasks).then(function (objectDisplayFormUriValues) {\n                                tasks = [];\n                                for (i = 0; i < filters.length; i += 1) {\n                                    if (filters[i].value) {\n                                        tasks.push(buildElementFilter(context, filters[i], objectDisplayFormUriValues[i]));\n                                    }\n                                }\n                                if (tasks.length > 0) {\n                                    $q.all(tasks).then(function (contextFilters) {\n                                        if (contextFilters.length > 0) {\n                                            reportRequestContext = {\n                                                filters: contextFilters\n                                            };\n                                        }\n                                        resolve(reportRequestContext);\n                                    });\n                                } else {\n                                    resolve(null);\n                                }\n                            }).catch(reject);\n                        }\n\n                        if (filters) {\n                            if (options.translateFilters) {\n                                options.translateFilters(filters).then(buildContext);\n                            } else {\n                                buildContext(filters);\n                            }\n                        } else {\n                            resolve(null);\n                        }\n                    });\n                }\n\n                function executeReport(context, reportIdentifier, filters) {\n                    return $q(function (resolve, reject) {\n                        $q.all([getObjectUriFromIdentifier(context, reportIdentifier), buildReportRequestContext(context, filters)]).then(function (taskResults) {\n                            var postData = {},\n                                reportRequest = {},\n                                reportPath = taskResults[0],\n                                contextFilters = taskResults[1];\n\n                            reportRequest.report = reportPath;\n                            if (contextFilters) {\n                                reportRequest.context = contextFilters;\n                            }\n                            postData.report_req = reportRequest;\n\n                            executeReportByPostData(context, postData).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                }\n\n                function executeReportRaw(context, postData) {\n                    return $q(function (resolve, reject) {\n                        function loadReport(uri) {\n                            $http.get(uri, {\n                                withCredentials: true\n                            }).then(function (result) {\n                                if (result.data && result.data.uri) {\n                                    loadReport(context.apiRoot + result.data.uri);\n                                } else {\n                                    resolve(result);\n                                }\n                            }).catch(reject);\n                        }\n\n                        $http.post(context.apiRoot + '/gdc/app/projects/' + context.dataMartId + '/execute/raw', postData, {\n                            withCredentials: true\n                        }).then(function (result) {\n                            if (result.data && result.data.uri) {\n                                loadReport(context.apiRoot + result.data.uri);\n                            } else {\n                                resolve(result);\n                            }\n                        }).catch(reject);\n                    });\n                }\n\n                function getHeadlineDataResults(result) {\n                    var reportData = null,\n                        xtabData;\n\n                    if (result.data && result.data.xtab_data && result.data.xtab_data.data) {\n                        xtabData = result.data.xtab_data.data;\n                        if (xtabData[0] && xtabData[0][0]) {\n                            reportData = xtabData[0][0];\n                        }\n                    }\n\n                    return reportData;\n                }\n\n                function getLatestReportDefinition(context, reportIdentifier) {\n                    return $q(function (resolve, reject) {\n                        getObjectUriFromIdentifier(context, reportIdentifier).then(function (reportUri) {\n                            getObjectDefinitionByUri(context, reportUri).then(function (reportObject) {\n                                if (reportObject && reportObject.report && reportObject.report.content && reportObject.report.content.definitions) {\n                                    getObjectDefinitionByUri(context, reportObject.report.content.definitions.pop()).then(function (reportDefinition) {\n                                        resolve(reportDefinition);\n                                    }).catch(reject);\n                                } else {\n                                    reject();\n                                }\n                            }).catch(reject);\n                        }).catch(reject);\n                    });\n                }\n\n                function getHeadlineReportDrillContext(context, reportIdentifier, filters) {\n                    return $q(function (resolve, reject) {\n                        var drillAttribute,\n                            drillContext,\n                            metricUri,\n                            response,\n                            tasks = [getLatestReportDefinition(context, reportIdentifier),\n                                getObjectUriFromIdentifier(context, reportIdentifier)];\n\n                        if (filters) {\n                            tasks.push(buildReportRequestContext(context, filters));\n                        }\n\n                        $q.all(tasks).then(function (taskResults) {\n                            response = taskResults[0];\n\n                            if (response &&\n                                    response.reportDefinition &&\n                                    response.reportDefinition.content &&\n                                    response.reportDefinition.content.grid &&\n                                    response.reportDefinition.content.grid.metrics &&\n                                    response.reportDefinition.content.grid.metrics[0] &&\n                                    response.reportDefinition.content.grid.metrics[0].uri\n                                    ) {\n                                metricUri = response.reportDefinition.content.grid.metrics[0].uri;\n                                drillAttribute = response.reportDefinition.content.grid.metrics[0].drillAcrossStepAttributeDF;\n                            }\n\n                            drillContext = {\n                                reportUri: taskResults[1],\n                                executionContext: {\n                                    drillInto: {\n                                        locators: [\n                                            {\n                                                metricLocator: {\n                                                    uri: metricUri\n                                                }\n                                            }\n                                        ],\n                                        target: drillAttribute,\n                                        targetType: \"attributeDisplayForm\"\n                                    },\n                                    filters: (filters && taskResults[2] ? taskResults[2].filters : null)\n                                }\n                            };\n\n                            resolve(drillContext);\n                        }).catch(reject);\n                    });\n                }\n\n                function loadDrillInRecordIds(context, drillContext) {\n                    return $q(function (resolve, reject) {\n                        var postData = {\n                            report_req: {\n                                context: drillContext.executionContext,\n                                report: drillContext.reportUri\n                            }\n                        };\n\n                        executeReportRaw(context, postData).then(function (result) {\n                            var ids = [],\n                                rows;\n\n                            if (result.data) {\n                                //Break the CSV into an array or lines, removing the quotes around each field\n                                rows = result.data.replace(/\"/g, '').split(\"\\n\");\n\n                                //Drop the header row\n                                rows.shift();\n\n                                angular.forEach(rows, function (row) {\n                                    //Take the first column from the row and add it as the ID.  Check to make sure it isn't an empty string or 0 ID\n                                    var id = row.split(',')[0];\n                                    if (id) {\n                                        ids.push(id);\n                                    }\n                                });\n\n                                resolve(ids);\n                            } else {\n                                reject();\n                            }\n                        }).catch(reject);\n                    });\n                }\n\n                function platformIsAvailable() {\n                    return $q(function (resolve) {\n                        getApiRoot().then(function (apiRoot) {\n                            $http.get(apiRoot + '/gdc/ping', {\n                                withCredentials: true\n                            }).then(function () {\n                                resolve(true);\n                            }).catch(function () {\n                                resolve(false);\n                            });\n                        });\n                    });\n                }\n\n                self.platformIsAvailable = platformIsAvailable;\n\n                self.getObjectUriFromIdentifier = function (identifier) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            getObjectUriFromIdentifier(context, identifier).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                self.executeReport = function (reportIdentifier, filters) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            executeReport(context, reportIdentifier, filters).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                self.getHeadlineReportData = function (reportIdentifier, filters) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            executeReport(context, reportIdentifier, filters).then(function (data) {\n                                resolve(getHeadlineDataResults(data));\n                            }).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                self.getHeadlineReportDrillContext = function (reportIdentifier, filters) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            getHeadlineReportDrillContext(context, reportIdentifier, filters).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                self.loadDrillInRecordIds = function (drillContext) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            loadDrillInRecordIds(context, drillContext).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                self.getLatestReportDefinition = function (reportIdentifier) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            getLatestReportDefinition(context, reportIdentifier).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n\n                self.getObjectDefinitionByUri = function (objectUri) {\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticatedContext().then(function (context) {\n                            getObjectDefinitionByUri(context, objectUri).then(resolve).catch(reject);\n                        }).catch(reject);\n                    });\n                };\n            };\n\n            return BBDataMartAPI;\n        }]);\n}());",
    "/*jslint browser: false */\n/*global angular, setInterval, clearInterval */\n\n(function () {\n    'use strict';\n\n    angular.module('npi-datamart.authentication', [])\n        .factory('BBDataMartAuthentication', ['$q', '$http', '$rootScope', function ($q, $http, $rootScope) {\n            var BBDataMartAuthentication = function (options) {\n                var ensureAuthenticatedPromise,\n                    initialAuthPerformed,\n                    maintainAuthScopeCount = 0,\n                    self = this;\n\n                options = options || {};\n\n                if (!options.domain && !options.getDomain) {\n                    throw 'An option for domain or getDomain must be provided';\n                }\n\n                if (!options.ssoProvider && !options.getSSOProvider) {\n                    throw 'An option for ssoProvider or getSSOProvider must be provided';\n                }\n\n                if (!options.getSSOToken) {\n                    throw 'An option for getSSOToken must be provided.  This should be a function returning a promise for an SSO token to be used to authenticate with the data mart API.';\n                }\n\n                function getDomain() {\n                    return $q(function (resolve, reject) {\n                        if (options.domain) {\n                            resolve(options.domain);\n                        } else {\n                            options.getDomain().then(resolve).catch(reject);\n                        }\n                    });\n                }\n\n                function getSSOProvider() {\n                    return $q(function (resolve, reject) {\n                        if (options.ssoProvider) {\n                            resolve(options.ssoProvider);\n                        } else {\n                            options.getSSOProvider().then(resolve).catch(reject);\n                        }\n                    });\n                }\n\n                function getSSOUrl(targetUrl) {\n                    return $q(function (resolve, reject) {\n                        var tasks = [\n                            options.getSSOToken(),\n                            getDomain(),\n                            getSSOProvider()\n                        ];\n\n                        $q.all(tasks).then(function (values) {\n                            var iFrameUrl,\n                                reportRootPath,\n                                ssoToken,\n                                ssoProvider;\n\n                            ssoToken = values[0];\n                            reportRootPath = values[1];\n                            ssoProvider = values[2];\n\n                            if (ssoToken && ssoProvider) {\n                                iFrameUrl = reportRootPath;\n                                iFrameUrl += \"/gdc/account/customerlogin?sessionId=\";\n                                iFrameUrl += encodeURIComponent(ssoToken);\n                                iFrameUrl += \"&serverURL=\";\n                                iFrameUrl += encodeURIComponent(ssoProvider);\n                                iFrameUrl += \"&targetURL=\";\n                                iFrameUrl += encodeURIComponent(targetUrl);\n\n                                resolve(iFrameUrl);\n                            }\n                        }).catch(reject);\n                    });\n                }\n\n                /*Checks if a failure reason corresponds to a 401 unauthorized response*/\n                function isUnauthorizedFailure(reason) {\n                    return reason && reason.status === 401;\n                }\n\n                /*Requests a temporary token for use with the API*/\n                function getTemporaryToken() {\n                    return $q(function (resolve, reject) {\n                        getDomain().then(function (domain) {\n                            var getTokenUrl = domain + '/gdc/account/token';\n                            $http.get(getTokenUrl, { withCredentials: true }).then(function () {\n                                resolve();\n                            }).catch(reject);\n                        }).catch(reject);\n                    });\n                }\n\n                /*Performs an SSO with the API, retreiving both a long lived authentication token and a temporary token*/\n                function authenticate() {\n                    return $q(function (resolve, reject) {\n                        getSSOUrl('/gdc/account/token').then(function (ssoUrl) {\n                            $http.get(ssoUrl, { withCredentials: true }).then(function () {\n                                resolve();\n                            }).catch(function () {\n                                //The request for single sign on failed.  In some cases, such as Google Chrome on iOS, this request\n                                //may have actually succesfully logged the user in but the load request goes to the catch block because\n                                //of CORS issues.  While not confirmed, this seems to possibly be due to an issue with the fact that\n                                //the SSO request returns a 302 to a separate route that then returns a 200.  Due to a browser bug,\n                                //the request to the second route may not be including the origin header resulting in a CORS failure.\n                                //To better handle that scenario, make a separate call to get an Temporary Token which will either\n                                //fail with a 401 or return with a 200 (no 302 redirect needed).  If this succeeds, the SSO was a success.\n                                //Otherwise it was a failure.\n                                getTemporaryToken().then(function () {\n                                    resolve();\n                                }).catch(reject);\n                            });\n                        }).catch(reject);\n                    });\n                }\n\n                /*Ensures that the browser has a temporary token by requesting one, and then authenticating if the request fails with a 401*/\n                function ensureTemporaryToken() {\n                    return $q(function (resolve, reject) {\n                        getTemporaryToken().then(function () {\n                            resolve();\n                        }).catch(function (reason) {\n                            if (isUnauthorizedFailure(reason)) {\n                                authenticate().then(function () {\n                                    resolve();\n                                }).catch(reject);\n                            } else {\n                                reject(reason);\n                            }\n                        });\n                    });\n                }\n\n                function ensureAuthenticated() {\n                    if (!ensureAuthenticatedPromise) {\n                        ensureAuthenticatedPromise = $q(function (resolve, reject) {\n                            var getTokenPromise;\n\n                            if (initialAuthPerformed) {\n                                getTokenPromise = ensureTemporaryToken();\n                            } else {\n                                initialAuthPerformed = true;\n                                getTokenPromise = authenticate();\n                            }\n\n                            getTokenPromise.then(function () {\n                                //The token will expire after 10 minutes.  Clear the promise after 8 minutes to ensure any request after that\n                                //will force the token to be renewed.\n                                var intervalHandle,\n                                    promiseClearTime = (new Date()).getTime() + 480000;\n\n                                //Check back every second to compare current time to the clear time.  Using a frequent interval with a time check\n                                //instead of a timeout because timeout is not reliable in scenarios such as hibernation.  This is needed to ensure\n                                //we will try to authenticate ASAP after the token has expired.\n                                //NOTE: This intentionally uses setInterval instead of $Interval to avoid a digest cycle every second\n                                intervalHandle = setInterval(function () {\n                                    if ((new Date()).getTime() > promiseClearTime) {\n                                        clearInterval(intervalHandle);\n                                        ensureAuthenticatedPromise = null;\n                                        if (maintainAuthScopeCount > 0) {\n                                            $rootScope.$apply(function () {\n                                                ensureAuthenticated();\n                                            });\n                                        }\n                                    }\n                                }, 1000);\n                                resolve();\n                            }).catch(function (reason) {\n                                //Remove the cached ensureAuthenticatedPromise since it failed.  That way it will\n                                //be executed again at the next request.\n                                ensureAuthenticatedPromise = null;\n                                reject(reason);\n                            });\n                        });\n                    }\n\n                    return ensureAuthenticatedPromise;\n                }\n\n                /*Ensures that the API is currently authenticated and will ensure the API maintains authentication tokens until the specified scope is destroyed*/\n                function maintainAuthentication($scope) {\n                    //Increment the number of scopes requesting that authentication be maintained.\n                    maintainAuthScopeCount += 1;\n\n                    //When the scope is destroyed, decrement the count.\n                    $scope.$on('$destroy', function () {\n                        maintainAuthScopeCount -= 1;\n                    });\n\n                    //Return a promise once authentication has been ensured.\n                    return $q(function (resolve, reject) {\n                        ensureAuthenticated().then(function () {\n                            resolve();\n                        }).catch(reject);\n                    });\n                }\n\n                self.getDomain = getDomain;\n                self.ensureAuthenticated = ensureAuthenticated;\n                self.maintainAuthentication = maintainAuthentication;\n            };\n\n            return BBDataMartAuthentication;\n        }]);\n}());",
    "/*jslint browser: false */\n/*global angular*/\n\n(function () {\n    'use strict';\n    \n    var modules = [\n        //'sky',\n        'npi-datamart.authentication',\n        'npi-datamart.api'\n    ];\n\n    angular.module('npi-datamart', modules);\n}());",
    "angular.module('npi-datamart.templates', []).run(['$templateCache', function($templateCache) {\n\n}]);\n"
  ]
}